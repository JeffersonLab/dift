// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: loadbalancer.proto
// Original file comments:
//
// Copyright 2023, Jefferson Science Associates, LLC.
// Subject to the terms in the LICENSE file found in the top-level directory.
//
// EPSCI Group
// Thomas Jefferson National Accelerator Facility
// 12000, Jefferson Ave, Newport News, VA 23606
// (757)-269-7100
//
#ifndef GRPC_loadbalancer_2eproto__INCLUDED
#define GRPC_loadbalancer_2eproto__INCLUDED

#include "loadbalancer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace loadbalancer {

// The backend state reporting service definition.
class LoadBalancer final {
 public:
  static constexpr char const* service_full_name() {
    return "loadbalancer.LoadBalancer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a backend's registration request to server
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::loadbalancer::RegisterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::RegisterReply>> AsyncRegister(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::RegisterReply>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::RegisterReply>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::RegisterReply>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    // Sends a backend's request to unregister to server
    virtual ::grpc::Status Deregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::loadbalancer::DeregisterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::DeregisterReply>> AsyncDeregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::DeregisterReply>>(AsyncDeregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::DeregisterReply>> PrepareAsyncDeregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::DeregisterReply>>(PrepareAsyncDeregisterRaw(context, request, cq));
    }
    // Sends a backend's state to server
    virtual ::grpc::Status SendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::loadbalancer::SendStateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::SendStateReply>> AsyncSendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::SendStateReply>>(AsyncSendStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::SendStateReply>> PrepareAsyncSendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::SendStateReply>>(PrepareAsyncSendStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a backend's registration request to server
      virtual void Register(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest* request, ::loadbalancer::RegisterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest* request, ::loadbalancer::RegisterReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sends a backend's request to unregister to server
      virtual void Deregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest* request, ::loadbalancer::DeregisterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Deregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest* request, ::loadbalancer::DeregisterReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sends a backend's state to server
      virtual void SendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest* request, ::loadbalancer::SendStateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest* request, ::loadbalancer::SendStateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::RegisterReply>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::RegisterReply>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::DeregisterReply>* AsyncDeregisterRaw(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::DeregisterReply>* PrepareAsyncDeregisterRaw(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::SendStateReply>* AsyncSendStateRaw(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loadbalancer::SendStateReply>* PrepareAsyncSendStateRaw(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Register(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::loadbalancer::RegisterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::RegisterReply>> AsyncRegister(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::RegisterReply>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::RegisterReply>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::RegisterReply>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Deregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::loadbalancer::DeregisterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::DeregisterReply>> AsyncDeregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::DeregisterReply>>(AsyncDeregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::DeregisterReply>> PrepareAsyncDeregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::DeregisterReply>>(PrepareAsyncDeregisterRaw(context, request, cq));
    }
    ::grpc::Status SendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::loadbalancer::SendStateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::SendStateReply>> AsyncSendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::SendStateReply>>(AsyncSendStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::SendStateReply>> PrepareAsyncSendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loadbalancer::SendStateReply>>(PrepareAsyncSendStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest* request, ::loadbalancer::RegisterReply* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest* request, ::loadbalancer::RegisterReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Deregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest* request, ::loadbalancer::DeregisterReply* response, std::function<void(::grpc::Status)>) override;
      void Deregister(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest* request, ::loadbalancer::DeregisterReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest* request, ::loadbalancer::SendStateReply* response, std::function<void(::grpc::Status)>) override;
      void SendState(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest* request, ::loadbalancer::SendStateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::loadbalancer::RegisterReply>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loadbalancer::RegisterReply>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::loadbalancer::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loadbalancer::DeregisterReply>* AsyncDeregisterRaw(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loadbalancer::DeregisterReply>* PrepareAsyncDeregisterRaw(::grpc::ClientContext* context, const ::loadbalancer::DeregisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loadbalancer::SendStateReply>* AsyncSendStateRaw(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loadbalancer::SendStateReply>* PrepareAsyncSendStateRaw(::grpc::ClientContext* context, const ::loadbalancer::SendStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Deregister_;
    const ::grpc::internal::RpcMethod rpcmethod_SendState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a backend's registration request to server
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::loadbalancer::RegisterRequest* request, ::loadbalancer::RegisterReply* response);
    // Sends a backend's request to unregister to server
    virtual ::grpc::Status Deregister(::grpc::ServerContext* context, const ::loadbalancer::DeregisterRequest* request, ::loadbalancer::DeregisterReply* response);
    // Sends a backend's state to server
    virtual ::grpc::Status SendState(::grpc::ServerContext* context, const ::loadbalancer::SendStateRequest* request, ::loadbalancer::SendStateReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::loadbalancer::RegisterRequest* /*request*/, ::loadbalancer::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::loadbalancer::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::loadbalancer::RegisterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Deregister() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deregister(::grpc::ServerContext* /*context*/, const ::loadbalancer::DeregisterRequest* /*request*/, ::loadbalancer::DeregisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregister(::grpc::ServerContext* context, ::loadbalancer::DeregisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::loadbalancer::DeregisterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendState(::grpc::ServerContext* /*context*/, const ::loadbalancer::SendStateRequest* /*request*/, ::loadbalancer::SendStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendState(::grpc::ServerContext* context, ::loadbalancer::SendStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::loadbalancer::SendStateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Deregister<WithAsyncMethod_SendState<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::loadbalancer::RegisterRequest, ::loadbalancer::RegisterReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::loadbalancer::RegisterRequest* request, ::loadbalancer::RegisterReply* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::loadbalancer::RegisterRequest, ::loadbalancer::RegisterReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::loadbalancer::RegisterRequest, ::loadbalancer::RegisterReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::loadbalancer::RegisterRequest* /*request*/, ::loadbalancer::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::loadbalancer::RegisterRequest* /*request*/, ::loadbalancer::RegisterReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Deregister() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::loadbalancer::DeregisterRequest, ::loadbalancer::DeregisterReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::loadbalancer::DeregisterRequest* request, ::loadbalancer::DeregisterReply* response) { return this->Deregister(context, request, response); }));}
    void SetMessageAllocatorFor_Deregister(
        ::grpc::MessageAllocator< ::loadbalancer::DeregisterRequest, ::loadbalancer::DeregisterReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::loadbalancer::DeregisterRequest, ::loadbalancer::DeregisterReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deregister(::grpc::ServerContext* /*context*/, const ::loadbalancer::DeregisterRequest* /*request*/, ::loadbalancer::DeregisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deregister(
      ::grpc::CallbackServerContext* /*context*/, const ::loadbalancer::DeregisterRequest* /*request*/, ::loadbalancer::DeregisterReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::loadbalancer::SendStateRequest, ::loadbalancer::SendStateReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::loadbalancer::SendStateRequest* request, ::loadbalancer::SendStateReply* response) { return this->SendState(context, request, response); }));}
    void SetMessageAllocatorFor_SendState(
        ::grpc::MessageAllocator< ::loadbalancer::SendStateRequest, ::loadbalancer::SendStateReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::loadbalancer::SendStateRequest, ::loadbalancer::SendStateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendState(::grpc::ServerContext* /*context*/, const ::loadbalancer::SendStateRequest* /*request*/, ::loadbalancer::SendStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendState(
      ::grpc::CallbackServerContext* /*context*/, const ::loadbalancer::SendStateRequest* /*request*/, ::loadbalancer::SendStateReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Register<WithCallbackMethod_Deregister<WithCallbackMethod_SendState<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::loadbalancer::RegisterRequest* /*request*/, ::loadbalancer::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Deregister() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deregister(::grpc::ServerContext* /*context*/, const ::loadbalancer::DeregisterRequest* /*request*/, ::loadbalancer::DeregisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendState(::grpc::ServerContext* /*context*/, const ::loadbalancer::SendStateRequest* /*request*/, ::loadbalancer::SendStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::loadbalancer::RegisterRequest* /*request*/, ::loadbalancer::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Deregister() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deregister(::grpc::ServerContext* /*context*/, const ::loadbalancer::DeregisterRequest* /*request*/, ::loadbalancer::DeregisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendState(::grpc::ServerContext* /*context*/, const ::loadbalancer::SendStateRequest* /*request*/, ::loadbalancer::SendStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::loadbalancer::RegisterRequest* /*request*/, ::loadbalancer::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Deregister() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Deregister(context, request, response); }));
    }
    ~WithRawCallbackMethod_Deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deregister(::grpc::ServerContext* /*context*/, const ::loadbalancer::DeregisterRequest* /*request*/, ::loadbalancer::DeregisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deregister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendState(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendState(::grpc::ServerContext* /*context*/, const ::loadbalancer::SendStateRequest* /*request*/, ::loadbalancer::SendStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::loadbalancer::RegisterRequest, ::loadbalancer::RegisterReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::loadbalancer::RegisterRequest, ::loadbalancer::RegisterReply>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::loadbalancer::RegisterRequest* /*request*/, ::loadbalancer::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::loadbalancer::RegisterRequest,::loadbalancer::RegisterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Deregister() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::loadbalancer::DeregisterRequest, ::loadbalancer::DeregisterReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::loadbalancer::DeregisterRequest, ::loadbalancer::DeregisterReply>* streamer) {
                       return this->StreamedDeregister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Deregister(::grpc::ServerContext* /*context*/, const ::loadbalancer::DeregisterRequest* /*request*/, ::loadbalancer::DeregisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeregister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::loadbalancer::DeregisterRequest,::loadbalancer::DeregisterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::loadbalancer::SendStateRequest, ::loadbalancer::SendStateReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::loadbalancer::SendStateRequest, ::loadbalancer::SendStateReply>* streamer) {
                       return this->StreamedSendState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendState(::grpc::ServerContext* /*context*/, const ::loadbalancer::SendStateRequest* /*request*/, ::loadbalancer::SendStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::loadbalancer::SendStateRequest,::loadbalancer::SendStateReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Deregister<WithStreamedUnaryMethod_SendState<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Deregister<WithStreamedUnaryMethod_SendState<Service > > > StreamedService;
};

}  // namespace loadbalancer


#endif  // GRPC_loadbalancer_2eproto__INCLUDED
