// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registration.proto

#ifndef PROTOBUF_INCLUDED_registration_2eproto
#define PROTOBUF_INCLUDED_registration_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_registration_2eproto 

namespace protobuf_registration_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_registration_2eproto
namespace xmsg {
namespace proto {
class Registration;
class RegistrationDefaultTypeInternal;
extern RegistrationDefaultTypeInternal _Registration_default_instance_;
}  // namespace proto
}  // namespace xmsg
namespace google {
namespace protobuf {
template<> ::xmsg::proto::Registration* Arena::CreateMaybeMessage<::xmsg::proto::Registration>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xmsg {
namespace proto {

enum Registration_OwnerType {
  Registration_OwnerType_PUBLISHER = 1,
  Registration_OwnerType_SUBSCRIBER = 2
};
bool Registration_OwnerType_IsValid(int value);
const Registration_OwnerType Registration_OwnerType_OwnerType_MIN = Registration_OwnerType_PUBLISHER;
const Registration_OwnerType Registration_OwnerType_OwnerType_MAX = Registration_OwnerType_SUBSCRIBER;
const int Registration_OwnerType_OwnerType_ARRAYSIZE = Registration_OwnerType_OwnerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Registration_OwnerType_descriptor();
inline const ::std::string& Registration_OwnerType_Name(Registration_OwnerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Registration_OwnerType_descriptor(), value);
}
inline bool Registration_OwnerType_Parse(
    const ::std::string& name, Registration_OwnerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Registration_OwnerType>(
    Registration_OwnerType_descriptor(), name, value);
}
// ===================================================================

class Registration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xmsg.proto.Registration) */ {
 public:
  Registration();
  virtual ~Registration();

  Registration(const Registration& from);

  inline Registration& operator=(const Registration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Registration(Registration&& from) noexcept
    : Registration() {
    *this = ::std::move(from);
  }

  inline Registration& operator=(Registration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Registration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Registration* internal_default_instance() {
    return reinterpret_cast<const Registration*>(
               &_Registration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Registration* other);
  friend void swap(Registration& a, Registration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Registration* New() const final {
    return CreateMaybeMessage<Registration>(NULL);
  }

  Registration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Registration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Registration& from);
  void MergeFrom(const Registration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Registration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Registration_OwnerType OwnerType;
  static const OwnerType PUBLISHER =
    Registration_OwnerType_PUBLISHER;
  static const OwnerType SUBSCRIBER =
    Registration_OwnerType_SUBSCRIBER;
  static inline bool OwnerType_IsValid(int value) {
    return Registration_OwnerType_IsValid(value);
  }
  static const OwnerType OwnerType_MIN =
    Registration_OwnerType_OwnerType_MIN;
  static const OwnerType OwnerType_MAX =
    Registration_OwnerType_OwnerType_MAX;
  static const int OwnerType_ARRAYSIZE =
    Registration_OwnerType_OwnerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OwnerType_descriptor() {
    return Registration_OwnerType_descriptor();
  }
  static inline const ::std::string& OwnerType_Name(OwnerType value) {
    return Registration_OwnerType_Name(value);
  }
  static inline bool OwnerType_Parse(const ::std::string& name,
      OwnerType* value) {
    return Registration_OwnerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 2 [default = "undefined"];
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required string host = 3;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 3;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // required string domain = 5;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 5;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // optional string subject = 6 [default = "undefined"];
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 6;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // optional string type = 7 [default = "undefined"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required sfixed32 port = 4;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // optional .xmsg.proto.Registration.OwnerType ownerType = 8;
  bool has_ownertype() const;
  void clear_ownertype();
  static const int kOwnerTypeFieldNumber = 8;
  ::xmsg::proto::Registration_OwnerType ownertype() const;
  void set_ownertype(::xmsg::proto::Registration_OwnerType value);

  // @@protoc_insertion_point(class_scope:xmsg.proto.Registration)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_description();
  void clear_has_description();
  void set_has_host();
  void clear_has_host();
  void set_has_port();
  void clear_has_port();
  void set_has_domain();
  void clear_has_domain();
  void set_has_subject();
  void clear_has_subject();
  void set_has_type();
  void clear_has_type();
  void set_has_ownertype();
  void clear_has_ownertype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_description_;
  private:
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_subject_;
  private:
  ::google::protobuf::internal::ArenaStringPtr subject_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int32 port_;
  int ownertype_;
  friend struct ::protobuf_registration_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Registration

// required string name = 1;
inline bool Registration::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Registration::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Registration::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Registration::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Registration::name() const {
  // @@protoc_insertion_point(field_get:xmsg.proto.Registration.name)
  return name_.GetNoArena();
}
inline void Registration::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xmsg.proto.Registration.name)
}
#if LANG_CXX11
inline void Registration::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xmsg.proto.Registration.name)
}
#endif
inline void Registration::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xmsg.proto.Registration.name)
}
inline void Registration::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xmsg.proto.Registration.name)
}
inline ::std::string* Registration::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:xmsg.proto.Registration.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Registration::release_name() {
  // @@protoc_insertion_point(field_release:xmsg.proto.Registration.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Registration::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xmsg.proto.Registration.name)
}

// optional string description = 2 [default = "undefined"];
inline bool Registration::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Registration::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Registration::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Registration::clear_description() {
  description_.ClearToDefaultNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_description_.get());
  clear_has_description();
}
inline const ::std::string& Registration::description() const {
  // @@protoc_insertion_point(field_get:xmsg.proto.Registration.description)
  return description_.GetNoArena();
}
inline void Registration::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_description_.get(), value);
  // @@protoc_insertion_point(field_set:xmsg.proto.Registration.description)
}
#if LANG_CXX11
inline void Registration::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_description_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xmsg.proto.Registration.description)
}
#endif
inline void Registration::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_description_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xmsg.proto.Registration.description)
}
inline void Registration::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_description_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xmsg.proto.Registration.description)
}
inline ::std::string* Registration::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:xmsg.proto.Registration.description)
  return description_.MutableNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_description_.get());
}
inline ::std::string* Registration::release_description() {
  // @@protoc_insertion_point(field_release:xmsg.proto.Registration.description)
  if (!has_description()) {
    return NULL;
  }
  clear_has_description();
  return description_.ReleaseNonDefaultNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_description_.get());
}
inline void Registration::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_description_.get(), description);
  // @@protoc_insertion_point(field_set_allocated:xmsg.proto.Registration.description)
}

// required string host = 3;
inline bool Registration::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Registration::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Registration::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Registration::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& Registration::host() const {
  // @@protoc_insertion_point(field_get:xmsg.proto.Registration.host)
  return host_.GetNoArena();
}
inline void Registration::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xmsg.proto.Registration.host)
}
#if LANG_CXX11
inline void Registration::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xmsg.proto.Registration.host)
}
#endif
inline void Registration::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xmsg.proto.Registration.host)
}
inline void Registration::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xmsg.proto.Registration.host)
}
inline ::std::string* Registration::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:xmsg.proto.Registration.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Registration::release_host() {
  // @@protoc_insertion_point(field_release:xmsg.proto.Registration.host)
  if (!has_host()) {
    return NULL;
  }
  clear_has_host();
  return host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Registration::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:xmsg.proto.Registration.host)
}

// required sfixed32 port = 4;
inline bool Registration::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Registration::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Registration::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Registration::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Registration::port() const {
  // @@protoc_insertion_point(field_get:xmsg.proto.Registration.port)
  return port_;
}
inline void Registration::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:xmsg.proto.Registration.port)
}

// required string domain = 5;
inline bool Registration::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Registration::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Registration::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Registration::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
inline const ::std::string& Registration::domain() const {
  // @@protoc_insertion_point(field_get:xmsg.proto.Registration.domain)
  return domain_.GetNoArena();
}
inline void Registration::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xmsg.proto.Registration.domain)
}
#if LANG_CXX11
inline void Registration::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xmsg.proto.Registration.domain)
}
#endif
inline void Registration::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xmsg.proto.Registration.domain)
}
inline void Registration::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xmsg.proto.Registration.domain)
}
inline ::std::string* Registration::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:xmsg.proto.Registration.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Registration::release_domain() {
  // @@protoc_insertion_point(field_release:xmsg.proto.Registration.domain)
  if (!has_domain()) {
    return NULL;
  }
  clear_has_domain();
  return domain_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Registration::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:xmsg.proto.Registration.domain)
}

// optional string subject = 6 [default = "undefined"];
inline bool Registration::has_subject() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Registration::set_has_subject() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Registration::clear_has_subject() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Registration::clear_subject() {
  subject_.ClearToDefaultNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_subject_.get());
  clear_has_subject();
}
inline const ::std::string& Registration::subject() const {
  // @@protoc_insertion_point(field_get:xmsg.proto.Registration.subject)
  return subject_.GetNoArena();
}
inline void Registration::set_subject(const ::std::string& value) {
  set_has_subject();
  subject_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_subject_.get(), value);
  // @@protoc_insertion_point(field_set:xmsg.proto.Registration.subject)
}
#if LANG_CXX11
inline void Registration::set_subject(::std::string&& value) {
  set_has_subject();
  subject_.SetNoArena(
    &::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_subject_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xmsg.proto.Registration.subject)
}
#endif
inline void Registration::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subject();
  subject_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_subject_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xmsg.proto.Registration.subject)
}
inline void Registration::set_subject(const char* value, size_t size) {
  set_has_subject();
  subject_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_subject_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xmsg.proto.Registration.subject)
}
inline ::std::string* Registration::mutable_subject() {
  set_has_subject();
  // @@protoc_insertion_point(field_mutable:xmsg.proto.Registration.subject)
  return subject_.MutableNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_subject_.get());
}
inline ::std::string* Registration::release_subject() {
  // @@protoc_insertion_point(field_release:xmsg.proto.Registration.subject)
  if (!has_subject()) {
    return NULL;
  }
  clear_has_subject();
  return subject_.ReleaseNonDefaultNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_subject_.get());
}
inline void Registration::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    set_has_subject();
  } else {
    clear_has_subject();
  }
  subject_.SetAllocatedNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_subject_.get(), subject);
  // @@protoc_insertion_point(field_set_allocated:xmsg.proto.Registration.subject)
}

// optional string type = 7 [default = "undefined"];
inline bool Registration::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Registration::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Registration::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Registration::clear_type() {
  type_.ClearToDefaultNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& Registration::type() const {
  // @@protoc_insertion_point(field_get:xmsg.proto.Registration.type)
  return type_.GetNoArena();
}
inline void Registration::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:xmsg.proto.Registration.type)
}
#if LANG_CXX11
inline void Registration::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xmsg.proto.Registration.type)
}
#endif
inline void Registration::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xmsg.proto.Registration.type)
}
inline void Registration::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xmsg.proto.Registration.type)
}
inline ::std::string* Registration::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:xmsg.proto.Registration.type)
  return type_.MutableNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* Registration::release_type() {
  // @@protoc_insertion_point(field_release:xmsg.proto.Registration.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void Registration::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::xmsg::proto::Registration::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:xmsg.proto.Registration.type)
}

// optional .xmsg.proto.Registration.OwnerType ownerType = 8;
inline bool Registration::has_ownertype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Registration::set_has_ownertype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Registration::clear_has_ownertype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Registration::clear_ownertype() {
  ownertype_ = 1;
  clear_has_ownertype();
}
inline ::xmsg::proto::Registration_OwnerType Registration::ownertype() const {
  // @@protoc_insertion_point(field_get:xmsg.proto.Registration.ownerType)
  return static_cast< ::xmsg::proto::Registration_OwnerType >(ownertype_);
}
inline void Registration::set_ownertype(::xmsg::proto::Registration_OwnerType value) {
  assert(::xmsg::proto::Registration_OwnerType_IsValid(value));
  set_has_ownertype();
  ownertype_ = value;
  // @@protoc_insertion_point(field_set:xmsg.proto.Registration.ownerType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace xmsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xmsg::proto::Registration_OwnerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xmsg::proto::Registration_OwnerType>() {
  return ::xmsg::proto::Registration_OwnerType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_registration_2eproto
