// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loadbalancer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_loadbalancer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_loadbalancer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_loadbalancer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_loadbalancer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_loadbalancer_2eproto;
namespace loadbalancer {
class DeregisterReply;
struct DeregisterReplyDefaultTypeInternal;
extern DeregisterReplyDefaultTypeInternal _DeregisterReply_default_instance_;
class DeregisterRequest;
struct DeregisterRequestDefaultTypeInternal;
extern DeregisterRequestDefaultTypeInternal _DeregisterRequest_default_instance_;
class RegisterReply;
struct RegisterReplyDefaultTypeInternal;
extern RegisterReplyDefaultTypeInternal _RegisterReply_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class SendStateReply;
struct SendStateReplyDefaultTypeInternal;
extern SendStateReplyDefaultTypeInternal _SendStateReply_default_instance_;
class SendStateRequest;
struct SendStateRequestDefaultTypeInternal;
extern SendStateRequestDefaultTypeInternal _SendStateRequest_default_instance_;
}  // namespace loadbalancer
PROTOBUF_NAMESPACE_OPEN
template<> ::loadbalancer::DeregisterReply* Arena::CreateMaybeMessage<::loadbalancer::DeregisterReply>(Arena*);
template<> ::loadbalancer::DeregisterRequest* Arena::CreateMaybeMessage<::loadbalancer::DeregisterRequest>(Arena*);
template<> ::loadbalancer::RegisterReply* Arena::CreateMaybeMessage<::loadbalancer::RegisterReply>(Arena*);
template<> ::loadbalancer::RegisterRequest* Arena::CreateMaybeMessage<::loadbalancer::RegisterRequest>(Arena*);
template<> ::loadbalancer::SendStateReply* Arena::CreateMaybeMessage<::loadbalancer::SendStateReply>(Arena*);
template<> ::loadbalancer::SendStateRequest* Arena::CreateMaybeMessage<::loadbalancer::SendStateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace loadbalancer {

enum PortRange : int {
  PORT_RANGE_1 = 0,
  PORT_RANGE_2 = 1,
  PORT_RANGE_4 = 2,
  PORT_RANGE_8 = 3,
  PORT_RANGE_16 = 4,
  PORT_RANGE_32 = 5,
  PORT_RANGE_64 = 6,
  PORT_RANGE_128 = 7,
  PORT_RANGE_256 = 8,
  PORT_RANGE_512 = 9,
  PORT_RANGE_1024 = 10,
  PORT_RANGE_2048 = 11,
  PORT_RANGE_4096 = 12,
  PORT_RANGE_8192 = 13,
  PORT_RANGE_16384 = 14,
  PortRange_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PortRange_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PortRange_IsValid(int value);
constexpr PortRange PortRange_MIN = PORT_RANGE_1;
constexpr PortRange PortRange_MAX = PORT_RANGE_16384;
constexpr int PortRange_ARRAYSIZE = PortRange_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortRange_descriptor();
template<typename T>
inline const std::string& PortRange_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PortRange>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PortRange_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PortRange_descriptor(), enum_t_value);
}
inline bool PortRange_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PortRange* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PortRange>(
    PortRange_descriptor(), name, value);
}
// ===================================================================

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:loadbalancer.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterRequest& from) {
    RegisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loadbalancer.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthTokenFieldNumber = 1,
    kNameFieldNumber = 2,
    kDPlaneTargetIPFieldNumber = 8,
    kRamBytesFieldNumber = 4,
    kBufCountFieldNumber = 5,
    kCpusFieldNumber = 3,
    kSetPointPercentFieldNumber = 7,
    kBufSizeBytesFieldNumber = 6,
    kDPlaneTargetPortFieldNumber = 9,
    kDPlaneTargetPortRangeFieldNumber = 10,
  };
  // string authToken = 1;
  void clear_authtoken();
  const std::string& authtoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authtoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authtoken();
  PROTOBUF_NODISCARD std::string* release_authtoken();
  void set_allocated_authtoken(std::string* authtoken);
  private:
  const std::string& _internal_authtoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authtoken(const std::string& value);
  std::string* _internal_mutable_authtoken();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string dPlaneTargetIP = 8;
  void clear_dplanetargetip();
  const std::string& dplanetargetip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dplanetargetip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dplanetargetip();
  PROTOBUF_NODISCARD std::string* release_dplanetargetip();
  void set_allocated_dplanetargetip(std::string* dplanetargetip);
  private:
  const std::string& _internal_dplanetargetip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dplanetargetip(const std::string& value);
  std::string* _internal_mutable_dplanetargetip();
  public:

  // uint64 ramBytes = 4;
  void clear_rambytes();
  uint64_t rambytes() const;
  void set_rambytes(uint64_t value);
  private:
  uint64_t _internal_rambytes() const;
  void _internal_set_rambytes(uint64_t value);
  public:

  // uint64 bufCount = 5;
  void clear_bufcount();
  uint64_t bufcount() const;
  void set_bufcount(uint64_t value);
  private:
  uint64_t _internal_bufcount() const;
  void _internal_set_bufcount(uint64_t value);
  public:

  // uint32 cpus = 3;
  void clear_cpus();
  uint32_t cpus() const;
  void set_cpus(uint32_t value);
  private:
  uint32_t _internal_cpus() const;
  void _internal_set_cpus(uint32_t value);
  public:

  // float setPointPercent = 7;
  void clear_setpointpercent();
  float setpointpercent() const;
  void set_setpointpercent(float value);
  private:
  float _internal_setpointpercent() const;
  void _internal_set_setpointpercent(float value);
  public:

  // uint64 bufSizeBytes = 6;
  void clear_bufsizebytes();
  uint64_t bufsizebytes() const;
  void set_bufsizebytes(uint64_t value);
  private:
  uint64_t _internal_bufsizebytes() const;
  void _internal_set_bufsizebytes(uint64_t value);
  public:

  // uint32 dPlaneTargetPort = 9;
  void clear_dplanetargetport();
  uint32_t dplanetargetport() const;
  void set_dplanetargetport(uint32_t value);
  private:
  uint32_t _internal_dplanetargetport() const;
  void _internal_set_dplanetargetport(uint32_t value);
  public:

  // .loadbalancer.PortRange dPlaneTargetPortRange = 10;
  void clear_dplanetargetportrange();
  ::loadbalancer::PortRange dplanetargetportrange() const;
  void set_dplanetargetportrange(::loadbalancer::PortRange value);
  private:
  ::loadbalancer::PortRange _internal_dplanetargetportrange() const;
  void _internal_set_dplanetargetportrange(::loadbalancer::PortRange value);
  public:

  // @@protoc_insertion_point(class_scope:loadbalancer.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authtoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dplanetargetip_;
    uint64_t rambytes_;
    uint64_t bufcount_;
    uint32_t cpus_;
    float setpointpercent_;
    uint64_t bufsizebytes_;
    uint32_t dplanetargetport_;
    int dplanetargetportrange_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_loadbalancer_2eproto;
};
// -------------------------------------------------------------------

class RegisterReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:loadbalancer.RegisterReply) */ {
 public:
  inline RegisterReply() : RegisterReply(nullptr) {}
  ~RegisterReply() override;
  explicit PROTOBUF_CONSTEXPR RegisterReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterReply(const RegisterReply& from);
  RegisterReply(RegisterReply&& from) noexcept
    : RegisterReply() {
    *this = ::std::move(from);
  }

  inline RegisterReply& operator=(const RegisterReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterReply& operator=(RegisterReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterReply* internal_default_instance() {
    return reinterpret_cast<const RegisterReply*>(
               &_RegisterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterReply& a, RegisterReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterReply& from) {
    RegisterReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loadbalancer.RegisterReply";
  }
  protected:
  explicit RegisterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionTokenFieldNumber = 1,
  };
  // string sessionToken = 1;
  void clear_sessiontoken();
  const std::string& sessiontoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessiontoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessiontoken();
  PROTOBUF_NODISCARD std::string* release_sessiontoken();
  void set_allocated_sessiontoken(std::string* sessiontoken);
  private:
  const std::string& _internal_sessiontoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessiontoken(const std::string& value);
  std::string* _internal_mutable_sessiontoken();
  public:

  // @@protoc_insertion_point(class_scope:loadbalancer.RegisterReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessiontoken_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_loadbalancer_2eproto;
};
// -------------------------------------------------------------------

class DeregisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:loadbalancer.DeregisterRequest) */ {
 public:
  inline DeregisterRequest() : DeregisterRequest(nullptr) {}
  ~DeregisterRequest() override;
  explicit PROTOBUF_CONSTEXPR DeregisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeregisterRequest(const DeregisterRequest& from);
  DeregisterRequest(DeregisterRequest&& from) noexcept
    : DeregisterRequest() {
    *this = ::std::move(from);
  }

  inline DeregisterRequest& operator=(const DeregisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeregisterRequest& operator=(DeregisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeregisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeregisterRequest* internal_default_instance() {
    return reinterpret_cast<const DeregisterRequest*>(
               &_DeregisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeregisterRequest& a, DeregisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeregisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeregisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeregisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeregisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeregisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeregisterRequest& from) {
    DeregisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeregisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loadbalancer.DeregisterRequest";
  }
  protected:
  explicit DeregisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionTokenFieldNumber = 1,
  };
  // string sessionToken = 1;
  void clear_sessiontoken();
  const std::string& sessiontoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessiontoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessiontoken();
  PROTOBUF_NODISCARD std::string* release_sessiontoken();
  void set_allocated_sessiontoken(std::string* sessiontoken);
  private:
  const std::string& _internal_sessiontoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessiontoken(const std::string& value);
  std::string* _internal_mutable_sessiontoken();
  public:

  // @@protoc_insertion_point(class_scope:loadbalancer.DeregisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessiontoken_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_loadbalancer_2eproto;
};
// -------------------------------------------------------------------

class DeregisterReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:loadbalancer.DeregisterReply) */ {
 public:
  inline DeregisterReply() : DeregisterReply(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeregisterReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeregisterReply(const DeregisterReply& from);
  DeregisterReply(DeregisterReply&& from) noexcept
    : DeregisterReply() {
    *this = ::std::move(from);
  }

  inline DeregisterReply& operator=(const DeregisterReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeregisterReply& operator=(DeregisterReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeregisterReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeregisterReply* internal_default_instance() {
    return reinterpret_cast<const DeregisterReply*>(
               &_DeregisterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeregisterReply& a, DeregisterReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeregisterReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeregisterReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeregisterReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeregisterReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeregisterReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeregisterReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loadbalancer.DeregisterReply";
  }
  protected:
  explicit DeregisterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:loadbalancer.DeregisterReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_loadbalancer_2eproto;
};
// -------------------------------------------------------------------

class SendStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:loadbalancer.SendStateRequest) */ {
 public:
  inline SendStateRequest() : SendStateRequest(nullptr) {}
  ~SendStateRequest() override;
  explicit PROTOBUF_CONSTEXPR SendStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendStateRequest(const SendStateRequest& from);
  SendStateRequest(SendStateRequest&& from) noexcept
    : SendStateRequest() {
    *this = ::std::move(from);
  }

  inline SendStateRequest& operator=(const SendStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendStateRequest& operator=(SendStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendStateRequest* internal_default_instance() {
    return reinterpret_cast<const SendStateRequest*>(
               &_SendStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendStateRequest& a, SendStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendStateRequest& from) {
    SendStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loadbalancer.SendStateRequest";
  }
  protected:
  explicit SendStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionTokenFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kFillPercentFieldNumber = 3,
    kPidErrorFieldNumber = 4,
    kIsReadyFieldNumber = 5,
  };
  // string sessionToken = 1;
  void clear_sessiontoken();
  const std::string& sessiontoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessiontoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessiontoken();
  PROTOBUF_NODISCARD std::string* release_sessiontoken();
  void set_allocated_sessiontoken(std::string* sessiontoken);
  private:
  const std::string& _internal_sessiontoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessiontoken(const std::string& value);
  std::string* _internal_mutable_sessiontoken();
  public:

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // float fillPercent = 3;
  void clear_fillpercent();
  float fillpercent() const;
  void set_fillpercent(float value);
  private:
  float _internal_fillpercent() const;
  void _internal_set_fillpercent(float value);
  public:

  // float pidError = 4;
  void clear_piderror();
  float piderror() const;
  void set_piderror(float value);
  private:
  float _internal_piderror() const;
  void _internal_set_piderror(float value);
  public:

  // bool isReady = 5;
  void clear_isready();
  bool isready() const;
  void set_isready(bool value);
  private:
  bool _internal_isready() const;
  void _internal_set_isready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:loadbalancer.SendStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessiontoken_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    float fillpercent_;
    float piderror_;
    bool isready_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_loadbalancer_2eproto;
};
// -------------------------------------------------------------------

class SendStateReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:loadbalancer.SendStateReply) */ {
 public:
  inline SendStateReply() : SendStateReply(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SendStateReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendStateReply(const SendStateReply& from);
  SendStateReply(SendStateReply&& from) noexcept
    : SendStateReply() {
    *this = ::std::move(from);
  }

  inline SendStateReply& operator=(const SendStateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendStateReply& operator=(SendStateReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendStateReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendStateReply* internal_default_instance() {
    return reinterpret_cast<const SendStateReply*>(
               &_SendStateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendStateReply& a, SendStateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SendStateReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendStateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendStateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendStateReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SendStateReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SendStateReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loadbalancer.SendStateReply";
  }
  protected:
  explicit SendStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:loadbalancer.SendStateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_loadbalancer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterRequest

// string authToken = 1;
inline void RegisterRequest::clear_authtoken() {
  _impl_.authtoken_.ClearToEmpty();
}
inline const std::string& RegisterRequest::authtoken() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.authToken)
  return _internal_authtoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_authtoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authtoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.authToken)
}
inline std::string* RegisterRequest::mutable_authtoken() {
  std::string* _s = _internal_mutable_authtoken();
  // @@protoc_insertion_point(field_mutable:loadbalancer.RegisterRequest.authToken)
  return _s;
}
inline const std::string& RegisterRequest::_internal_authtoken() const {
  return _impl_.authtoken_.Get();
}
inline void RegisterRequest::_internal_set_authtoken(const std::string& value) {
  
  _impl_.authtoken_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_authtoken() {
  
  return _impl_.authtoken_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_authtoken() {
  // @@protoc_insertion_point(field_release:loadbalancer.RegisterRequest.authToken)
  return _impl_.authtoken_.Release();
}
inline void RegisterRequest::set_allocated_authtoken(std::string* authtoken) {
  if (authtoken != nullptr) {
    
  } else {
    
  }
  _impl_.authtoken_.SetAllocated(authtoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authtoken_.IsDefault()) {
    _impl_.authtoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loadbalancer.RegisterRequest.authToken)
}

// string name = 2;
inline void RegisterRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.name)
}
inline std::string* RegisterRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:loadbalancer.RegisterRequest.name)
  return _s;
}
inline const std::string& RegisterRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegisterRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:loadbalancer.RegisterRequest.name)
  return _impl_.name_.Release();
}
inline void RegisterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loadbalancer.RegisterRequest.name)
}

// uint32 cpus = 3;
inline void RegisterRequest::clear_cpus() {
  _impl_.cpus_ = 0u;
}
inline uint32_t RegisterRequest::_internal_cpus() const {
  return _impl_.cpus_;
}
inline uint32_t RegisterRequest::cpus() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.cpus)
  return _internal_cpus();
}
inline void RegisterRequest::_internal_set_cpus(uint32_t value) {
  
  _impl_.cpus_ = value;
}
inline void RegisterRequest::set_cpus(uint32_t value) {
  _internal_set_cpus(value);
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.cpus)
}

// uint64 ramBytes = 4;
inline void RegisterRequest::clear_rambytes() {
  _impl_.rambytes_ = uint64_t{0u};
}
inline uint64_t RegisterRequest::_internal_rambytes() const {
  return _impl_.rambytes_;
}
inline uint64_t RegisterRequest::rambytes() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.ramBytes)
  return _internal_rambytes();
}
inline void RegisterRequest::_internal_set_rambytes(uint64_t value) {
  
  _impl_.rambytes_ = value;
}
inline void RegisterRequest::set_rambytes(uint64_t value) {
  _internal_set_rambytes(value);
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.ramBytes)
}

// uint64 bufCount = 5;
inline void RegisterRequest::clear_bufcount() {
  _impl_.bufcount_ = uint64_t{0u};
}
inline uint64_t RegisterRequest::_internal_bufcount() const {
  return _impl_.bufcount_;
}
inline uint64_t RegisterRequest::bufcount() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.bufCount)
  return _internal_bufcount();
}
inline void RegisterRequest::_internal_set_bufcount(uint64_t value) {
  
  _impl_.bufcount_ = value;
}
inline void RegisterRequest::set_bufcount(uint64_t value) {
  _internal_set_bufcount(value);
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.bufCount)
}

// uint64 bufSizeBytes = 6;
inline void RegisterRequest::clear_bufsizebytes() {
  _impl_.bufsizebytes_ = uint64_t{0u};
}
inline uint64_t RegisterRequest::_internal_bufsizebytes() const {
  return _impl_.bufsizebytes_;
}
inline uint64_t RegisterRequest::bufsizebytes() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.bufSizeBytes)
  return _internal_bufsizebytes();
}
inline void RegisterRequest::_internal_set_bufsizebytes(uint64_t value) {
  
  _impl_.bufsizebytes_ = value;
}
inline void RegisterRequest::set_bufsizebytes(uint64_t value) {
  _internal_set_bufsizebytes(value);
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.bufSizeBytes)
}

// float setPointPercent = 7;
inline void RegisterRequest::clear_setpointpercent() {
  _impl_.setpointpercent_ = 0;
}
inline float RegisterRequest::_internal_setpointpercent() const {
  return _impl_.setpointpercent_;
}
inline float RegisterRequest::setpointpercent() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.setPointPercent)
  return _internal_setpointpercent();
}
inline void RegisterRequest::_internal_set_setpointpercent(float value) {
  
  _impl_.setpointpercent_ = value;
}
inline void RegisterRequest::set_setpointpercent(float value) {
  _internal_set_setpointpercent(value);
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.setPointPercent)
}

// string dPlaneTargetIP = 8;
inline void RegisterRequest::clear_dplanetargetip() {
  _impl_.dplanetargetip_.ClearToEmpty();
}
inline const std::string& RegisterRequest::dplanetargetip() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.dPlaneTargetIP)
  return _internal_dplanetargetip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_dplanetargetip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dplanetargetip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.dPlaneTargetIP)
}
inline std::string* RegisterRequest::mutable_dplanetargetip() {
  std::string* _s = _internal_mutable_dplanetargetip();
  // @@protoc_insertion_point(field_mutable:loadbalancer.RegisterRequest.dPlaneTargetIP)
  return _s;
}
inline const std::string& RegisterRequest::_internal_dplanetargetip() const {
  return _impl_.dplanetargetip_.Get();
}
inline void RegisterRequest::_internal_set_dplanetargetip(const std::string& value) {
  
  _impl_.dplanetargetip_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_dplanetargetip() {
  
  return _impl_.dplanetargetip_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_dplanetargetip() {
  // @@protoc_insertion_point(field_release:loadbalancer.RegisterRequest.dPlaneTargetIP)
  return _impl_.dplanetargetip_.Release();
}
inline void RegisterRequest::set_allocated_dplanetargetip(std::string* dplanetargetip) {
  if (dplanetargetip != nullptr) {
    
  } else {
    
  }
  _impl_.dplanetargetip_.SetAllocated(dplanetargetip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dplanetargetip_.IsDefault()) {
    _impl_.dplanetargetip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loadbalancer.RegisterRequest.dPlaneTargetIP)
}

// uint32 dPlaneTargetPort = 9;
inline void RegisterRequest::clear_dplanetargetport() {
  _impl_.dplanetargetport_ = 0u;
}
inline uint32_t RegisterRequest::_internal_dplanetargetport() const {
  return _impl_.dplanetargetport_;
}
inline uint32_t RegisterRequest::dplanetargetport() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.dPlaneTargetPort)
  return _internal_dplanetargetport();
}
inline void RegisterRequest::_internal_set_dplanetargetport(uint32_t value) {
  
  _impl_.dplanetargetport_ = value;
}
inline void RegisterRequest::set_dplanetargetport(uint32_t value) {
  _internal_set_dplanetargetport(value);
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.dPlaneTargetPort)
}

// .loadbalancer.PortRange dPlaneTargetPortRange = 10;
inline void RegisterRequest::clear_dplanetargetportrange() {
  _impl_.dplanetargetportrange_ = 0;
}
inline ::loadbalancer::PortRange RegisterRequest::_internal_dplanetargetportrange() const {
  return static_cast< ::loadbalancer::PortRange >(_impl_.dplanetargetportrange_);
}
inline ::loadbalancer::PortRange RegisterRequest::dplanetargetportrange() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterRequest.dPlaneTargetPortRange)
  return _internal_dplanetargetportrange();
}
inline void RegisterRequest::_internal_set_dplanetargetportrange(::loadbalancer::PortRange value) {
  
  _impl_.dplanetargetportrange_ = value;
}
inline void RegisterRequest::set_dplanetargetportrange(::loadbalancer::PortRange value) {
  _internal_set_dplanetargetportrange(value);
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterRequest.dPlaneTargetPortRange)
}

// -------------------------------------------------------------------

// RegisterReply

// string sessionToken = 1;
inline void RegisterReply::clear_sessiontoken() {
  _impl_.sessiontoken_.ClearToEmpty();
}
inline const std::string& RegisterReply::sessiontoken() const {
  // @@protoc_insertion_point(field_get:loadbalancer.RegisterReply.sessionToken)
  return _internal_sessiontoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterReply::set_sessiontoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sessiontoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loadbalancer.RegisterReply.sessionToken)
}
inline std::string* RegisterReply::mutable_sessiontoken() {
  std::string* _s = _internal_mutable_sessiontoken();
  // @@protoc_insertion_point(field_mutable:loadbalancer.RegisterReply.sessionToken)
  return _s;
}
inline const std::string& RegisterReply::_internal_sessiontoken() const {
  return _impl_.sessiontoken_.Get();
}
inline void RegisterReply::_internal_set_sessiontoken(const std::string& value) {
  
  _impl_.sessiontoken_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterReply::_internal_mutable_sessiontoken() {
  
  return _impl_.sessiontoken_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterReply::release_sessiontoken() {
  // @@protoc_insertion_point(field_release:loadbalancer.RegisterReply.sessionToken)
  return _impl_.sessiontoken_.Release();
}
inline void RegisterReply::set_allocated_sessiontoken(std::string* sessiontoken) {
  if (sessiontoken != nullptr) {
    
  } else {
    
  }
  _impl_.sessiontoken_.SetAllocated(sessiontoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sessiontoken_.IsDefault()) {
    _impl_.sessiontoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loadbalancer.RegisterReply.sessionToken)
}

// -------------------------------------------------------------------

// DeregisterRequest

// string sessionToken = 1;
inline void DeregisterRequest::clear_sessiontoken() {
  _impl_.sessiontoken_.ClearToEmpty();
}
inline const std::string& DeregisterRequest::sessiontoken() const {
  // @@protoc_insertion_point(field_get:loadbalancer.DeregisterRequest.sessionToken)
  return _internal_sessiontoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeregisterRequest::set_sessiontoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sessiontoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loadbalancer.DeregisterRequest.sessionToken)
}
inline std::string* DeregisterRequest::mutable_sessiontoken() {
  std::string* _s = _internal_mutable_sessiontoken();
  // @@protoc_insertion_point(field_mutable:loadbalancer.DeregisterRequest.sessionToken)
  return _s;
}
inline const std::string& DeregisterRequest::_internal_sessiontoken() const {
  return _impl_.sessiontoken_.Get();
}
inline void DeregisterRequest::_internal_set_sessiontoken(const std::string& value) {
  
  _impl_.sessiontoken_.Set(value, GetArenaForAllocation());
}
inline std::string* DeregisterRequest::_internal_mutable_sessiontoken() {
  
  return _impl_.sessiontoken_.Mutable(GetArenaForAllocation());
}
inline std::string* DeregisterRequest::release_sessiontoken() {
  // @@protoc_insertion_point(field_release:loadbalancer.DeregisterRequest.sessionToken)
  return _impl_.sessiontoken_.Release();
}
inline void DeregisterRequest::set_allocated_sessiontoken(std::string* sessiontoken) {
  if (sessiontoken != nullptr) {
    
  } else {
    
  }
  _impl_.sessiontoken_.SetAllocated(sessiontoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sessiontoken_.IsDefault()) {
    _impl_.sessiontoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loadbalancer.DeregisterRequest.sessionToken)
}

// -------------------------------------------------------------------

// DeregisterReply

// -------------------------------------------------------------------

// SendStateRequest

// string sessionToken = 1;
inline void SendStateRequest::clear_sessiontoken() {
  _impl_.sessiontoken_.ClearToEmpty();
}
inline const std::string& SendStateRequest::sessiontoken() const {
  // @@protoc_insertion_point(field_get:loadbalancer.SendStateRequest.sessionToken)
  return _internal_sessiontoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendStateRequest::set_sessiontoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sessiontoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loadbalancer.SendStateRequest.sessionToken)
}
inline std::string* SendStateRequest::mutable_sessiontoken() {
  std::string* _s = _internal_mutable_sessiontoken();
  // @@protoc_insertion_point(field_mutable:loadbalancer.SendStateRequest.sessionToken)
  return _s;
}
inline const std::string& SendStateRequest::_internal_sessiontoken() const {
  return _impl_.sessiontoken_.Get();
}
inline void SendStateRequest::_internal_set_sessiontoken(const std::string& value) {
  
  _impl_.sessiontoken_.Set(value, GetArenaForAllocation());
}
inline std::string* SendStateRequest::_internal_mutable_sessiontoken() {
  
  return _impl_.sessiontoken_.Mutable(GetArenaForAllocation());
}
inline std::string* SendStateRequest::release_sessiontoken() {
  // @@protoc_insertion_point(field_release:loadbalancer.SendStateRequest.sessionToken)
  return _impl_.sessiontoken_.Release();
}
inline void SendStateRequest::set_allocated_sessiontoken(std::string* sessiontoken) {
  if (sessiontoken != nullptr) {
    
  } else {
    
  }
  _impl_.sessiontoken_.SetAllocated(sessiontoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sessiontoken_.IsDefault()) {
    _impl_.sessiontoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loadbalancer.SendStateRequest.sessionToken)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool SendStateRequest::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool SendStateRequest::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SendStateRequest::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SendStateRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:loadbalancer.SendStateRequest.timestamp)
  return _internal_timestamp();
}
inline void SendStateRequest::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:loadbalancer.SendStateRequest.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SendStateRequest::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SendStateRequest::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:loadbalancer.SendStateRequest.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SendStateRequest::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SendStateRequest::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:loadbalancer.SendStateRequest.timestamp)
  return _msg;
}
inline void SendStateRequest::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:loadbalancer.SendStateRequest.timestamp)
}

// float fillPercent = 3;
inline void SendStateRequest::clear_fillpercent() {
  _impl_.fillpercent_ = 0;
}
inline float SendStateRequest::_internal_fillpercent() const {
  return _impl_.fillpercent_;
}
inline float SendStateRequest::fillpercent() const {
  // @@protoc_insertion_point(field_get:loadbalancer.SendStateRequest.fillPercent)
  return _internal_fillpercent();
}
inline void SendStateRequest::_internal_set_fillpercent(float value) {
  
  _impl_.fillpercent_ = value;
}
inline void SendStateRequest::set_fillpercent(float value) {
  _internal_set_fillpercent(value);
  // @@protoc_insertion_point(field_set:loadbalancer.SendStateRequest.fillPercent)
}

// float pidError = 4;
inline void SendStateRequest::clear_piderror() {
  _impl_.piderror_ = 0;
}
inline float SendStateRequest::_internal_piderror() const {
  return _impl_.piderror_;
}
inline float SendStateRequest::piderror() const {
  // @@protoc_insertion_point(field_get:loadbalancer.SendStateRequest.pidError)
  return _internal_piderror();
}
inline void SendStateRequest::_internal_set_piderror(float value) {
  
  _impl_.piderror_ = value;
}
inline void SendStateRequest::set_piderror(float value) {
  _internal_set_piderror(value);
  // @@protoc_insertion_point(field_set:loadbalancer.SendStateRequest.pidError)
}

// bool isReady = 5;
inline void SendStateRequest::clear_isready() {
  _impl_.isready_ = false;
}
inline bool SendStateRequest::_internal_isready() const {
  return _impl_.isready_;
}
inline bool SendStateRequest::isready() const {
  // @@protoc_insertion_point(field_get:loadbalancer.SendStateRequest.isReady)
  return _internal_isready();
}
inline void SendStateRequest::_internal_set_isready(bool value) {
  
  _impl_.isready_ = value;
}
inline void SendStateRequest::set_isready(bool value) {
  _internal_set_isready(value);
  // @@protoc_insertion_point(field_set:loadbalancer.SendStateRequest.isReady)
}

// -------------------------------------------------------------------

// SendStateReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace loadbalancer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::loadbalancer::PortRange> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::loadbalancer::PortRange>() {
  return ::loadbalancer::PortRange_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_loadbalancer_2eproto
